// tiles.js ‚Äî —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ (uniform grid) c –µ–¥–∏–Ω–æ–π —è—á–µ–π–∫–æ–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö,
// –Ω–æ –≤–∏–¥–µ–æ-—Ç–∞–π–ª—ã —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—Ç—Å—è –ø–æ —Å–≤–æ–µ–º—É AR –Ω–∞ –∫—Ä–∞—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∫–æ–ª–æ–Ω–æ–∫.
import { ctx, state } from "./state.js";
import { byId, hashColor, isMobileView } from "./utils.js";
import { fitSpotlightSize, applyLayout } from "./layout.js";
import { markHasVideo, recomputeHasVideo } from "./registry.js";

// ===== Debug AR toggler =====
const __DBG_AR__ = (()=>{
  try{
    const qs = new URLSearchParams(location.search);
    if (qs.get('debug') === 'ar') return true;
    const ls = localStorage.getItem('debugAR');
    return ls === '1';
  }catch{ return false; }
})();
function dbgAR(...a){ if (__DBG_AR__) try{ console.log('[AR]', ...a); }catch{} }
function setTileBadge(tile, text){
  if (!__DBG_AR__ || !tile) return;
  let b = tile.querySelector('.ar-badge');
  if (!b){
    b = document.createElement('div');
    b.className = 'ar-badge';
    Object.assign(b.style, { position:'absolute', left:'6px', top:'6px', zIndex:'5',
      background:'rgba(0,0,0,.5)', color:'#fff', fontSize:'10px', padding:'2px 4px',
      borderRadius:'6px', pointerEvents:'none' });
    tile.appendChild(b);
  }
  b.textContent = text;
}

// ==== Quality badge (always visible for video tiles) ====
function formatPLabel(w, h){
  const n = Math.max(1, Math.min(w|0, h|0));
  const std = [144, 240, 270, 360, 480, 540, 720, 900, 1080, 1440, 2160];
  let best = std[0];
  for (const s of std){ if (n >= s) best = s; else break; }
  return best + 'p';
}
function setQualityBadge(tile, w, h){
  if (!tile) return;
  const label = formatPLabel(w, h);
  // Top-right badge (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
  let b = tile.querySelector('.q-badge');
  if (!b){
    b = document.createElement('div');
    b.className = 'q-badge';
    b.textContent = '';
    tile.appendChild(b);
  }
  b.textContent = label;
  // –í –ø–æ–¥–ø–∏—Å–∏ .name —Ç–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º p
  const name = tile.querySelector('.name');
  if (name){
    let q = name.querySelector('.q');
    if (!q){
      q = document.createElement('span');
      q.className = 'q';
      name.appendChild(q);
    }
    q.textContent = label;
  }
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è fitSpotlightSize
function safeFitSpotlightSize() {
  try {
    if (typeof fitSpotlightSize === 'function') {
      fitSpotlightSize();
    }
  } catch (e) {
    console.warn('fitSpotlightSize not available:', e);
  }
}

/* ===== DOM helpers ===== */
export function tilesMain(){ return byId('tilesMain'); }
export function tilesRail(){ return byId('tilesRail'); }
export function tilesHost(){ return byId('tiles'); }  // –ø–æ–ª–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏
export function getLocalTileVideo(){ return document.querySelector('.tile.me video'); }

function isMobileGrid(){ return isMobileView() && !ctx.isStageFull; }

/* ==== Overlay (–∫–∞–∫ –±—ã–ª–æ) ==== */
const ov = byId('tileOverlay');
const ovMedia = byId('ovMedia');
const ovClose = byId('ovClose');
const ovName  = byId('ovName');
let ovReturnTile = null;
/* ==== Mini-settings (mobile) ==== */
let miniDlg = null;
function ensureMiniDlg(){
  if (miniDlg) return miniDlg;
  miniDlg = document.createElement('div');
  miniDlg.className = 'mini-dlg';
  miniDlg.innerHTML = `
    <div class="mini-backdrop"></div>
    <div class="mini-panel" role="dialog" aria-modal="true">
      <div class="mini-head"><span class="mini-title"></span><button class="mini-close" aria-label="–ó–∞–∫—Ä—ã—Ç—å">√ó</button></div>
      <div class="mini-body">
        <label class="mini-row">–ì—Ä–æ–º–∫–æ—Å—Ç—å
          <input class="mini-vol" type="range" min="0" max="100" value="100"/>
        </label>
        <label class="mini-row">–ö–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞
          <select class="mini-quality">
            <option value="auto">–ê–≤—Ç–æ</option>
            <option value="music">–ú—É–∑—ã–∫–∞</option>
            <option value="speech">–†–µ—á—å</option>
          </select>
        </label>
      </div>
    </div>`;
  document.body.appendChild(miniDlg);
  const close = ()=> miniDlg.classList.remove('open');
  miniDlg.querySelector('.mini-backdrop').addEventListener('click', close);
  miniDlg.querySelector('.mini-close').addEventListener('click', close);
  return miniDlg;
}
function openMiniSettings(tile){
  const pid = tile?.dataset?.pid; if (!pid) return;
  const rec = ctx.registry.get(pid.replace('#screen',''));
  const dlg = ensureMiniDlg();
  dlg.querySelector('.mini-title').textContent = tile.dataset.name || pid;
  const volEl = dlg.querySelector('.mini-vol');
  const qEl   = dlg.querySelector('.mini-quality');
  const curVol = Math.round((rec?.volume ?? 1) * 100);
  volEl.value = String(curVol);
  volEl.oninput = (e)=>{
    const v = Math.max(0, Math.min(100, Number(e.target.value||0)));
    if (rec){ rec.volume = v/100; if (rec.audioEl) rec.audioEl.volume = rec.volume; }
  };
  qEl.value = 'auto';
  miniDlg.classList.add('open');
}
// expose for debugging/use
try{ window.openMiniSettings = openMiniSettings; }catch{}

export async function openTileOverlay(tile){
  const v = tile.querySelector('video');
  if(!v) return;
  ovReturnTile = tile;
  ovName.textContent = tile.dataset.name || '–í–∏–¥–µ–æ';
  ov.classList.add('open'); ov.setAttribute('aria-hidden','false');
  ovMedia.innerHTML = ''; ovMedia.appendChild(v);
  try{ if(ov.requestFullscreen) await ov.requestFullscreen({ navigationUI:'hide' }); }catch{}
  try{ await screen.orientation.lock('landscape'); }catch{}
  state.me._mobileRotateOpen = true;
}
export async function closeTileOverlay(){
  if(!ovReturnTile) {
    ov.classList.remove('open'); ov.setAttribute('aria-hidden','true');
    try{ if(document.fullscreenElement) await document.exitFullscreen(); }catch{}
    try{ if(screen.orientation.unlock) screen.orientation.unlock(); }catch{}
    state.me._mobileRotateOpen = false;
    return;
  }
  const v = ovMedia.querySelector('video');
  if(v){ ovReturnTile.prepend(v); }
  ovReturnTile = null;
  ov.classList.remove('open'); ov.setAttribute('aria-hidden','true');
  try{ if(document.fullscreenElement) await document.exitFullscreen(); }catch{}
  try{ if(screen.orientation.unlock) screen.orientation.unlock(); }catch{}
  state.me._mobileRotateOpen = false;
}
ovClose?.addEventListener('click', closeTileOverlay);
ov?.addEventListener('click', (e)=>{ if(e.target===ov) closeTileOverlay(); });
document.addEventListener('keydown', (e)=>{ if(e.key==='Escape' && ov?.classList.contains('open')) closeTileOverlay(); });

/* ===== –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–π–ª–∞ / —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–∫–µ ===== */
export function createTileEl(identity, name, isLocal){
  const el=document.createElement('div');
  el.className='tile' + (isLocal?' me':'');

  el.dataset.pid=identity;
  el.dataset.name=name;
  // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–∫; –¥–ª—è –≤–∏–¥–µ–æ ‚Äî —Ñ–æ–Ω —É–±–∏—Ä–∞–µ–º –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏
  el.style.background = hashColor(name);

  const vol = isLocal ? '' :
    `<div class="vol"><span>üîä</span><input type="range" min="0" max="100" value="100" data-act="vol"></div>`;

  el.innerHTML = `
    <div class="placeholder"><div class="avatar-ph">${name.slice(0,1).toUpperCase()}</div></div>
    <div class="name">${name}${isLocal?' (—Ç—ã)':''}</div>
    ${vol}
    <button class="fs-btn" data-act="fs" title="–í–æ –≤–µ—Å—å —ç–∫—Ä–∞–Ω">‚õ∂</button>
    <div class="controls"><button class="ctrl" data-act="pin" title="–í —Å–ø–æ—Ç–ª–∞–π—Ç">‚≠ê</button></div>`;

  el.addEventListener('click', (e)=>{
    const act = e.target?.dataset?.act;
    if(act==='fs'){
      try{ openTileOverlay(el); }catch{}
      e.stopPropagation();
      return;
    }
    if(act==='pin'){
      ctx.pinnedId = (ctx.pinnedId===identity ? null : identity);
      e.stopPropagation();
      return;
    }
    // –ù–∞ –º–æ–±–∏–ª–∫–µ: –¥–ª—è –º–∏–Ω–∏-—Ç–∞–π–ª–æ–≤ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (isMobileView() && el.classList.contains('mini')){
      try { openMiniSettings(el); } catch {}
      e.stopPropagation();
      return;
    }
    if(el.querySelector('video')){ openTileOverlay(el); }
  });

// –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–∏–Ω–∏-—Ç–∞–π–ª–æ–≤ (–Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ listener)
document.addEventListener('click', (e)=>{
  try{
    if (!isMobileView()) return;
    // –ù–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ —Ñ—É–ª–ª—Å–∫—Ä–∏–Ω–∞ ‚Äî –¥–∞—ë–º –µ–π –≤—Å–ø–ª—ã—Ç—å
    if (e.target && e.target.closest && e.target.closest('.fs-btn')) return;
    const t = e.target && (e.target.closest ? e.target.closest('.tile') : null);
    if (t){
      // –µ—Å–ª–∏ —ç—Ç–æ –º–∏–Ω–∏-—Ç–∞–π–ª –∏–ª–∏ —Ç–∞–π–ª –±–µ–∑ –≤–∏–¥–µ–æ ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const isMini = t.classList.contains('mini');
      const hasVid = !!t.querySelector('video');
      if (!isMini && hasVid) return;
      openMiniSettings(t);
      e.stopPropagation();
      e.preventDefault();
    }
  }catch{}
}, true);

  el.addEventListener('input',(e)=>{
    if(e.target?.dataset?.act!=='vol') return;
    e.stopPropagation();
    const rec = ctx.registry.get(identity);
    const v = Math.max(0, Math.min(100, Number(e.target.value||0)));
    if(rec){
      rec.volume = v/100;
      if(rec.audioEl) rec.audioEl.volume = rec.volume;
    }
  });

  tilesMain().appendChild(el);
  requestLayout(); // –ø–µ—Ä–µ–ª–æ–∂–∏–º —Å—Ä–∞–∑—É
  return el;
}

export function createRowEl(identity, name){
  const row=document.createElement('div');
  row.className='user';
  row.dataset.pid = identity;
  row.innerHTML=`<div class="avatar" style="background:${hashColor(name)}">${name.slice(0,1).toUpperCase()}</div><div class="name">${name}</div>`;
  row.onclick=()=>{ ctx.pinnedId = (ctx.pinnedId===identity? null : identity); };
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±–∞ —Å–ø–∏—Å–∫–∞ (—Å–∞–π–¥–±–∞—Ä –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞, –∫–∞—Ä—É—Å–µ–ª—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
  const lists = document.querySelectorAll('#onlineList');
  lists.forEach(list => {
    const clonedRow = row.cloneNode(true);
    clonedRow.onclick = () => { ctx.pinnedId = (ctx.pinnedId===identity? null : identity); };
    list.appendChild(clonedRow);
  });
  
  return row;
}

/* ===== –í–∏–¥–µ–æ/–ê—É–¥–∏–æ ===== */
export function setTileAspectFromVideo(tile, videoEl){
  const w = videoEl.videoWidth | 0;
  const h = videoEl.videoHeight | 0;
  if (!w || !h) return;

  // –í–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è AR,
  // —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å–∫–∞—á–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–µ—Ä–µ–¥ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω–æ–π facing
  try{
    const isLocalTile = tile.dataset.pid === ctx.room?.localParticipant?.identity;
    if (isLocalTile && ctx._camSwitching) return;
  }catch{}

  tile.classList.toggle('portrait', h > w);
  tile.dataset.ar = (w>0 && h>0) ? String(w/h) : '';
  tile.dataset.vid = '1'; // –ø–æ–º–µ—Ç–∫–∞ ¬´–µ—Å—Ç—å –≤–∏–¥–µ–æ¬ª
  dbgAR('setTileAspectFromVideo', tile.dataset.pid, `${w}x${h}`, (w/h).toFixed(3));
  setTileBadge(tile, `${(w/h).toFixed(3)} (${w}x${h})`);

  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π AR –≤ —Ä–µ–µ—Å—Ç—Ä–µ
  try{
    const baseId = (tile.dataset.pid||'').replace('#screen','');
    const rec = ctx.registry.get(baseId);
    if (rec) rec.lastAR = w>0 && h>0 ? (w/h) : rec.lastAR;
  }catch{}

  // –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–∞–π–ª–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
  const m = tilesMain(); if (m && tile.parentElement !== m) m.appendChild(tile);

  // –í—Å–µ–≥–¥–∞ —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ä–∞—Å–∫–ª–∞–¥–∫—É (–∏ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –≤ –º–æ–∑–∞–∏–∫–µ —Ç–æ–∂–µ)
  try{
    layoutUniformGrid();
    setTimeout(layoutUniformGrid, 60);
  }catch{}
  if (tile.classList.contains('spotlight')) safeFitSpotlightSize();
}

export function applyCamTransformsTo(el){
  if(!el) return;
  const rot = state.settings.camFlip ? ' rotate(180deg)' : '';
  const mir = state.settings.camMirror ? ' scaleX(-1)' : '';
  el.style.transform = mir + rot;
}
export function applyCamTransformsToLive(){
  const v = getLocalTileVideo();
  applyCamTransformsTo(v);
}

export function safeRemoveVideo(el){
  try{ el.pause?.(); }catch{}
  try{ el.srcObject = null; }catch{}
  try{ el.removeAttribute('src'); }catch{}
  try{ el.load?.(); }catch{}
  try{ el.remove(); }catch{}
}

export function attachVideoToTile(track, identity, isLocal, labelOverride){
  const rec  = ctx.registry.get(identity.replace('#screen','')) || { name: identity };
  const name = labelOverride || rec.name || identity;
  const tile = ensureTile(identity, name, isLocal);

  const newId = track?.mediaStreamTrack?.id || track?.mediaStream?.id || '';
  const curV  = tile.querySelector('video');
  const curId = tile.dataset.vid || '';

  // –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π –ø–æ –æ–¥–Ω–æ–º—É –∏ —Ç–æ–º—É –∂–µ —Ä–µ–∞–ª—å–Ω–æ–º—É —Ç—Ä–µ–∫—É
  if (curV && curId && newId && curId === newId){
    // —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω —ç—Ç–æ—Ç –∂–µ –º–µ–¥–∏–∞—Ç—Ä–µ–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    curV.muted = !!isLocal;
    if (isLocal && !identity.includes('#screen')) applyCamTransformsTo(curV);
    setTileAspectFromVideo(tile, curV);
    return;
  }

  // –µ—Å–ª–∏ —ç—Ç–æ—Ç –∂–µ —Ä–µ–∞–ª—å–Ω—ã–π –º–µ–¥–∏–∞—Ç—Ä–µ–∫ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –î–†–£–ì–û–ô –ø–ª–∏—Ç–∫–µ ‚Äî –æ—Ç–∫–ª—é—á–∏–º –µ–≥–æ —Ç–∞–º
  if (newId){
    const dup = document.querySelector(`.tile[data-vid="${CSS.escape(newId)}"]`);
    if (dup && dup !== tile){
      const dupPid = dup.getAttribute('data-pid');
      try { showAvatarInTile(dupPid); } catch {
        const vprev = dup.querySelector('video');
        if (vprev) safeRemoveVideo(vprev);
        dup.dataset.vid=''; delete dup.dataset.ar;
      }
    }
  }

  if (curV && curId && curId === newId){
    curV.muted = !!isLocal;
    if (isLocal && !identity.includes('#screen')) applyCamTransformsTo(curV);
    setTileAspectFromVideo(tile, curV);
    return;
  }

  if (curV) safeRemoveVideo(curV);
  tile.querySelector('.placeholder')?.remove();
  // —É–±–∏—Ä–∞–µ–º —Ñ–æ–Ω-¬´–ø–ª–∞—à–∫—É¬ª —É —Ç–∞–π–ª–∞ —Å –≤–∏–¥–µ–æ
  try { tile.style.background='transparent'; } catch {}
  try { tile.classList.add('has-video'); } catch {}

  const v = track.attach();
  v.autoplay = true;
  v.playsInline = true;
  v.setAttribute('autoplay','');
  v.setAttribute('playsinline','');
  // —Å–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –¥–æ –ø—Ä–∏—Ö–æ–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –Ω–µ –≤–ª–∏—è—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–π –ª—ç–π–∞—É—Ç
  v.style.visibility = 'hidden';
  if (isLocal){
    v.muted = true;
    v.setAttribute('muted','');
  }
  v.classList.add('media');
  tile.dataset.vid = newId || '1';
  tile.prepend(v);

  if(isLocal && !identity.includes('#screen')) applyCamTransformsTo(v);

  const tryApply = ()=> {
    setTileAspectFromVideo(tile, v);
    if ((v.videoWidth|0) > 0 && (v.videoHeight|0) > 0){
      setQualityBadge(tile, v.videoWidth|0, v.videoHeight|0);
    }
    // –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –∏ —Ñ–æ—Ä—Å–∏–º —Ä–µ–ª–µ–π–∞—É—Ç
    if ((v.videoWidth|0) > 0 && (v.videoHeight|0) > 0){
      v.style.visibility = '';
      try { layoutUniformGrid(); setTimeout(layoutUniformGrid, 30); } catch {}
    }
  };
  v.addEventListener('loadedmetadata', tryApply);
  v.addEventListener('resize', tryApply);
  v.addEventListener('loadeddata', tryApply);
  tryApply();

  // –§–æ—Ä—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å—á—ë—Ç: —Å—Ä–∞–∑—É –∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à–æ–π —Ç–∞–π–º–∞—É—Ç.
  // –î–ª—è —á—É–∂–æ–≥–æ –≤–∏–¥–µ–æ —Ç–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∞–π–ª –∏–∑ –æ–≤–µ—Ä–ª–µ—è/—Å–ø–∏—Å–∫–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–∑–∞–∏–∫—É.
  const m = tilesMain(); if (m && tile.parentElement !== m) m.appendChild(tile);
  // –û—Ç–º–µ—Ç–∏–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ —É –±–∞–∑–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–±–µ–∑ #screen)
  try { markHasVideo(identity.replace('#screen',''), true); } catch {}
  // –ü–µ—Ä–µ–æ–±–Ω–æ–≤–∏–º —Ñ–ª–∞–≥ –ø–æ DOM, –µ—Å–ª–∏ track —É–∂–µ –æ—Ç—Ä–∏—Å–æ–≤–∞–ª—Å—è
  setTimeout(()=>{ try { recomputeHasVideo(identity.replace('#screen','')); } catch {} }, 30);
  // –î—ë—Ä–≥–∞–µ–º –æ–±—â–∏–π —Å–ª–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–∏, —á—Ç–æ–±—ã –ø—Ä–æ—Ñ–∏–ª–∏ (desktop/mobile) —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–∏–ª–∏ —Ä–µ–∂–∏–º
  try { applyLayout(); } catch {}
  if (isMobileGrid() || isMobileView()){
    layoutUniformGrid();
    setTimeout(()=> layoutUniformGrid(), 60);
    setTimeout(()=> layoutUniformGrid(), 160);
    setTimeout(()=> layoutUniformGrid(), 320);
  } else {
  requestLayout();
  }
}

export function ensureTile(identity, name, isLocal){
  let el = document.querySelector(`.tile[data-pid="${CSS.escape(identity)}"]`);
  if(el) return el;
  const baseId = identity.replace('#screen','');
  // –°–æ–∑–¥–∞—ë–º —Ç–∞–π–ª —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –µ—Å—Ç—å –≤ —Ä–µ–µ—Å—Ç—Ä–µ
  const rec = ctx.registry.get(baseId);
  if (!rec) return null;
  if(!identity.includes('#screen')){
    // –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Ç–∞–π–ª–∞ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
    return rec.tile || createTileEl(identity, name, isLocal);
  }
  // –¥–ª—è screen —Å–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–∞–π–ª, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–∞–∑–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫
  return createTileEl(identity, name, isLocal);
}

export function showAvatarInTile(identity){
  const t=document.querySelector(`.tile[data-pid="${CSS.escape(identity)}"]`);
  if(!t) return;
  t.classList.remove('portrait');
  const v = t.querySelector('video');
  if (v) safeRemoveVideo(v);
  t.dataset.vid = '';
  delete t.dataset.ar;
  try { markHasVideo(identity.replace('#screen',''), false); } catch {}
  try { t.classList.remove('has-video'); } catch {}
  // –ï—Å–ª–∏ –ø–ª–∏—Ç–∫–∞ —Å—Ç–∞–ª–∞ –±–µ–∑ –≤–∏–¥–µ–æ ‚Äî –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
  if(!t.querySelector('.placeholder')){
    const ph=document.createElement('div');
    ph.className='placeholder';
    ph.innerHTML=`<div class="avatar-ph">${(t.dataset.name||'?').slice(0,1).toUpperCase()}</div>`;
    t.prepend(ph);
  }
  // –≤–µ—Ä–Ω—ë–º —Ñ–æ–Ω-¬´–ø–ª–∞—à–∫—É¬ª –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∫–∏
  try { t.style.background = hashColor(t.dataset.name||''); } catch {}
  if (t.classList.contains('spotlight')) fitSpotlightSize();
  try { applyLayout(); } catch {}
  if (isMobileGrid()){
    layoutUniformGrid();
    setTimeout(()=>{ if (isMobileGrid()) layoutUniformGrid(); }, 50);
  } else {
  requestLayout();
  }
}

export function attachAudioTrack(track, baseId){
  const el=track.attach();
  el.style.display='none';
  document.body.appendChild(el);

  const rec = ctx.registry.get(baseId);
  if(rec){
    rec.audioEl = el;
    if(typeof rec.volume!=='number') rec.volume = 1;
    el.volume = rec.volume;
    const slider = rec.tile?.querySelector('.vol input[type=range]');
    if(slider){ slider.value = Math.round(rec.volume*100); slider.disabled=false; }
  }
  return el;
}

/* =========================================================================
   –†–ê–í–ù–û–ú–ï–†–ù–ê–Ø –°–ï–¢–ö–ê (UNIFORM) –° ¬´SPAN BY AR¬ª –î–õ–Ø –í–ò–î–ï–û-–¢–ê–ô–õ–û–í
   ‚Äî –æ–±—ã—á–Ω—ã–µ –ø–ª–∏—Ç–∫–∏: –µ–¥–∏–Ω—ã–π —Ä–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏ –ø–æ –≤—Å–µ–π —Å–µ—Ç–∫–µ
   ‚Äî –≤–∏–¥–µ–æ-–ø–ª–∏—Ç–∫–∏: —à–∏—Ä–∏–Ω–∞ = span*cellW (+gaps), –≥–¥–µ span‚âàAR_video/AR_cell
   ‚Äî —Ä–∞—Å—á—ë—Ç –≤–µ–¥—ë–º –ø–æ #tiles (fallback: #tilesMain)
   ========================================================================= */

function hasVideo(tile){
  return !!tile.dataset.vid && !!tile.querySelector('video');
}

function getVideoAR(tile){
  // –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ¬´–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π¬ª AR ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ (–≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã)
  const fr = parseFloat(tile?.dataset?.freezeAr);
  if (fr && isFinite(fr) && fr > 0) return fr;
  const v = tile.querySelector('video');
  const w = v?.videoWidth|0, h = v?.videoHeight|0;
  if (w>0 && h>0) return w/h;  // –≤—Å–µ–≥–¥–∞ –æ—Ç–¥–∞—ë–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π AR –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
  dbgAR('getVideoAR no meta', tile.dataset.pid);
  // fallback: –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π AR –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
  try{
    const baseId = (tile.dataset.pid||'').replace('#screen','');
    const rec = ctx.registry.get(baseId);
    if (rec && rec.lastAR && isFinite(rec.lastAR) && rec.lastAR>0) return rec.lastAR;
  }catch{}
  const d = parseFloat(tile.dataset.ar);
  return (d && isFinite(d) && d > 0) ? d : NaN;
}

function getTileAR(tile){
  const v = tile.querySelector('video');
  const w = v?.videoWidth|0, h = v?.videoHeight|0;
  if (w>0 && h>0) return w/h;   // –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–º–µ—Ä–∞–º –≤–∏–¥–µ–æ
  const d = parseFloat(tile.dataset.ar);
  if (d && isFinite(d) && d > 0) return d;
  return tile.classList.contains('portrait') ? (9/16) : (16/9);
}

// AR ¬´—è—á–µ–π–∫–∏¬ª –≤—ã–±–∏—Ä–∞–µ–º –¢–û–õ–¨–ö–û –ø–æ –æ–±—ã—á–Ω—ã–º (–±–µ–∑ –≤–∏–¥–µ–æ) –ø–ª–∏—Ç–∫–∞–º.
// –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äî –±–µ—Ä—ë–º 1:1 –∫–∞–∫ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π.
function pickCellAR(tiles){
  const ph = tiles.filter(t=>!hasVideo(t));
  if (!ph.length) return 1; // –≤—Å–µ –≤–∏–¥–µ–æ ‚Äî –¥–µ–ª–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é –±–∞–∑—É
  const ars = ph.map(getTileAR);
  const portraits = ars.filter(a=>a<1).length;
  const majority = portraits > ph.length/2 ? (9/16) : (16/9);
  // –ø–æ–ø—Ä–æ–±—É–µ–º —Ç–∞–∫–∂–µ –∫–≤–∞–¥—Ä–∞—Ç –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π
  // –≤–µ—Ä–Ω—ë–º —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±–ª–∏–∂–µ –∫ —Å—Ä–µ–¥–Ω–µ–º—É –ø–æ ¬´—Ñ–∞–Ω—Ç–æ–º–Ω—ã–º¬ª AR –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
  const avg = ars.reduce((s,a)=>s+a,0)/ars.length;
  const cand = [majority, 1];
  let best=cand[0], d=Math.abs(avg-best);
  if (Math.abs(avg-cand[1])<d) best=cand[1];
  return best;
}

// –∏–∑–º–µ—Ä—è–µ–º –ø–æ–ª–µ –ø–æ #tiles (–∏–ª–∏ #tilesMain)
function getFieldSize(){
  const host = tilesHost() || tilesMain() || document.body;
  const cs = getComputedStyle(host);
  const padH = (parseFloat(cs.paddingLeft)||0) + (parseFloat(cs.paddingRight)||0);
  const padV = (parseFloat(cs.paddingTop)||0)  + (parseFloat(cs.paddingBottom)||0);
  const W = Math.max(0, (host.clientWidth || host.getBoundingClientRect().width) - padH);
  const H = Math.max(0, (host.clientHeight|| host.getBoundingClientRect().height) - padV);
  return { W, H };
}

let layoutRAF = 0;
function requestLayout(){
  if (layoutRAF) return;
  layoutRAF = requestAnimationFrame(()=>{ layoutRAF = 0; layoutUniformGrid(); });
}

function layoutUniformGrid(){
  const m = tilesMain();
  if (!m) return;

  const tiles = Array.from(m.querySelectorAll('.tile'));
  const N = tiles.length;
  if (!N){ clearGrid(); return; }

  const { W, H } = getFieldSize();
  if (W < 10 || H < 10){ requestLayout(); return; }

  // –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —à–∏—Ä–∏–Ω—É
  m.style.width = '100%';

  const gap = parseFloat(getComputedStyle(m).getPropertyValue('--tile-gap')) || 10;

  // ==== Variant B: split video (80%) vs no-video (20%), videos keep native AR ====

  const allTiles = tiles;
  const videoTiles = allTiles.filter(t=> hasVideo(t));
  const noVideoTiles = allTiles.filter(t=> !hasVideo(t));

  // ¬´—Å–≤–æ—é¬ª –ø–ª–∏—Ç–∫—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–π
  const sortMeFirst = (arr)=> arr.slice().sort((a,b)=>{
    const am = a.classList.contains('me');
    const bm = b.classList.contains('me');
    if (am && !bm) return -1; if (!am && bm) return 1; return 0;
  });
  const videoTilesSorted   = sortMeFirst(videoTiles);
  const noVideoTilesSorted = sortMeFirst(noVideoTiles);

  const px = (v)=> Math.round(v) + 'px';

  // Helpers: place equal grid in rect
  function layoutEqualGrid(rect, items, opts){
    const forceSquare = !!(opts && opts.forceSquare);
    const asMini      = !!(opts && opts.asMini);
    const n = items.length; if (!n) return;
    const { x, y, w:RW, h:RH } = rect;
    let best=null;
    for (let cols=1; cols<=n; cols++){
      const rows = Math.ceil(n/cols);
      let cw = Math.floor((RW - gap*(cols-1)) / cols);
      let ch = Math.floor((RH - gap*(rows-1)) / rows);
      if (cw<=0 || ch<=0) continue;
      if (forceSquare){
        const s = Math.min(cw, ch);
        cw = ch = s;
      }
      const area = cw*ch; if (!best || area>best.area) best={cols,rows,cw,ch,area};
    }
    if (!best) return;
    const offX = x + Math.max(0, Math.floor((RW - (best.cols*best.cw + gap*(best.cols-1))) / 2));
    const offY = y + Math.max(0, Math.floor((RH - (best.rows*best.ch + gap*(best.rows-1))) / 2));
    let i=0;
    for (let r=0;r<best.rows;r++){
      for (let c=0;c<best.cols;c++){
        const el = items[i++]; if (!el) break;
        const left = offX + c*(best.cw+gap);
        const top  = offY + r*(best.ch+gap);
        el.style.boxSizing='border-box';
        el.style.position='absolute';
        el.style.left = px(left);
        el.style.top  = px(top);
        el.style.setProperty('width',  px(best.cw), 'important');
        el.style.setProperty('height', px(best.ch), 'important');
        el.style.aspectRatio='';
        // –ø–æ–º–µ—á–∞–µ–º –º–∏–Ω–∏-—Ç–∞–π–ª—ã (—Å–∫—Ä—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–∏ —Å–ª–∞–π–¥–µ—Ä –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—å)
        if (asMini) el.classList.add('mini'); else el.classList.remove('mini');
      }
    }
  }

  // Helpers: video mosaic with native AR in rect (1..3 rows)
  function layoutVideoMosaic(rect, items){
    const n = items.length; if (!n) return;
    const { x, y, w:RW, h:RH } = rect;
    const desiredAR = items.map(getVideoAR).map(ar=> (ar && isFinite(ar))? ar : 1);
    const maxRows = Math.min(3, Math.max(1, n));
    let placed = 0;

    // –ï—Å–ª–∏ –≤ LANDSCAPE –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –≤–∏–¥–µ–æ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–µ ‚Äî —É–¥–æ–±–Ω–µ–µ –∫–æ–ª–æ–Ω–æ—á–Ω–∞—è —É–∫–ª–∞–¥–∫–∞
    const isLandscape = matchMedia('(orientation: landscape)').matches;
    const portraitShare = desiredAR.filter(a=> a < 1).length / desiredAR.length;
    if (isLandscape && portraitShare > 0.5){
      // –ö–æ–ª–æ–Ω–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —à–∏—Ä–∏–Ω—ã. –ü–æ–¥–±–µ—Ä—ë–º —á–∏—Å–ª–æ –∫–æ–ª–æ–Ω–æ–∫ –∏ —à–∏—Ä–∏–Ω—É —Ç–∞–∫,
      // —á—Ç–æ–±—ã –∫–∞–∂–¥–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Ç–æ—á–Ω–æ –ø–æ–º–µ—â–∞–ª–∞—Å—å –ø–æ –≤—ã—Å–æ—Ç–µ RH.
      let bestCol = null;
      for (let cols=1; cols<=Math.min(3, n); cols++){
        // —á–µ—Ä–µ–¥—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º (round-robin)
        const colIdxs = Array.from({length: cols}, ()=> []);
        for (let i=0; i<n; i++) colIdxs[i % cols].push(i);

        // –ª–∏–º–∏—Ç —à–∏—Ä–∏–Ω—ã –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        const cwByWidth = Math.floor((RW - gap*(cols-1)) / cols);
        if (!(cwByWidth>0)) continue;

        // –ª–∏–º–∏—Ç —à–∏—Ä–∏–Ω—ã –∏–∑ –≤—ã—Å–æ—Ç—ã –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏: sum(h_i) + gaps <= RH,
        // –≥–¥–µ h_i = cw/ar_i => cw <= (RH - gaps) / sum(1/ar_i)
        let cwByHeight = Infinity;
        for (const list of colIdxs){
          const invSum = list.reduce((s,i)=> s + (1/(desiredAR[i]|| (16/9))), 0);
          const gaps = gap * Math.max(0, list.length - 1);
          const limit = Math.floor((RH - gaps) / Math.max(0.0001, invSum));
          cwByHeight = Math.min(cwByHeight, limit);
        }
        const cw = Math.max(1, Math.min(cwByWidth, cwByHeight));
        // –º–µ—Ç—Ä–∏–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–æ—â–∞–¥—å
        const area = cw * RH * cols; // –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
        if (!bestCol || area > bestCol.area){ bestCol = { cols, cw, colIdxs, area }; }
      }
      if (bestCol){
        const offX = x + Math.max(0, Math.floor((RW - (bestCol.cols*bestCol.cw + gap*(bestCol.cols-1))) / 2));
        for (let c=0; c<bestCol.cols; c++){
          const list = bestCol.colIdxs[c];
          // –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Ü–µ–Ω—Ç—Ä–æ–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–ª–æ–Ω–∫–∏
          const colHeights = list.map(i=> Math.max(1, Math.floor(bestCol.cw / (desiredAR[i] || (16/9)))));
          const colTotal = colHeights.reduce((s,h)=> s+h, 0) + gap * Math.max(0, colHeights.length - 1);
          let colY = y + Math.max(0, Math.floor((RH - colTotal) / 2));
          for (let k=0; k<list.length; k++){
            const idx = list[k];
            const el = items[idx]; const ar = desiredAR[idx]; if (!el || !ar) break;
            const h = Math.max(1, Math.floor(bestCol.cw / ar));
            // clamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ª–µ–∑—Ç–∏ –∑–∞ RH –∏–∑-–∑–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–π
            const remaining = (y + RH) - colY;
            const hClamped = Math.max(1, Math.min(h, remaining));
            el.style.boxSizing='border-box';
            el.style.position='absolute';
            el.style.left = (offX + c*(bestCol.cw+gap)) + 'px';
            el.style.top  = colY + 'px';
            el.style.setProperty('width',  bestCol.cw + 'px', 'important');
            el.style.setProperty('height', hClamped + 'px', 'important');
            el.style.aspectRatio='';
            colY += hClamped + gap;
            if (colY > y + RH) break;
            placed++;
          }
        }
        return;
      }
    }

    function distributeCounts(n, rows){
      const base=Math.floor(n/rows), rem=n%rows; return Array.from({length:rows},(_,i)=> base+(i<rem?1:0));
    }

    let best=null;
    for(let rows=1; rows<=maxRows; rows++){
      const counts=distributeCounts(n, rows);
      const availH = (RH - gap*(rows-1)) / rows; if (!(availH>0)) continue;
      let i=0, totalH=0; const rowsMeta=[];
      for(let r=0;r<rows;r++){
        const cnt=counts[r]; const idxs=Array.from({length:cnt},(_,k)=> i+k).filter(j=> j<n);
        const sumAR = idxs.reduce((s,j)=> s+desiredAR[j],0) || (16/9);
        const hRow = Math.max(1, Math.min(availH, (RW - gap*(idxs.length-1)) / sumAR));
        rowsMeta.push({ idxs, h: hRow }); totalH += hRow; i += cnt;
      }
      totalH += gap*(rowsMeta.length-1);
      const fits = totalH <= RH + 0.5; const score=(fits?0:10000)+Math.abs(RH-totalH);
      if(!best || score<best.score) best={rowsMeta,score,totalH};
    }
    if(!best) return;

    const totalRowsH = Math.round(best.totalH || 0);
    let yCur = y + Math.max(0, Math.floor((RH - totalRowsH) / 2));
    for(const row of best.rowsMeta){
      const hInt = Math.floor(row.h);
      const gapsW = gap * (row.idxs.length - 1);
      const roundW = row.idxs.map(j=> Math.round((desiredAR[j] || (16/9)) * hInt));
      let sumW = roundW.reduce((s,w)=> s+w, 0);
      const targetTilesW = RW - gapsW; let delta = targetTilesW - sumW;
      if (Math.abs(delta) <= 2 && roundW.length){
        roundW[roundW.length-1] = Math.max(1, roundW[roundW.length-1] + delta);
        sumW += delta;
      }
      const rowTotal = sumW + gapsW;
      let xCur = x + Math.max(0, Math.round((RW - rowTotal) / 2));
      for(let k=0;k<row.idxs.length;k++){
        const el = items[row.idxs[k]]; if(!el) continue;
        const w = roundW[k];
        el.style.boxSizing='border-box';
        el.style.position='absolute';
        el.style.left = px(xCur);
        el.style.top  = px(yCur);
        el.style.setProperty('width',  px(w), 'important');
        el.style.setProperty('height', px(hInt), 'important');
        el.style.aspectRatio='';
        xCur += w + gap;
        placed++;
      }
      yCur += hInt + gap;
    }

    // Fallback: –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–∑–ª–æ–∂–∏–ª–∏ ‚Äî —Ä–æ–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ –≤—Å–µ–π —à–∏—Ä–∏–Ω–µ
    if (!placed){
      const cw = Math.floor((RW - gap*(n-1)) / n);
      const ch = Math.max(1, Math.min(RH, Math.floor(RH)));
      let xCur = x;
      for (let i=0; i<n; i++){
        const el = items[i]; if (!el) continue;
        el.style.boxSizing='border-box';
        el.style.position='absolute';
        el.style.left = px(xCur);
        el.style.top  = px(y);
        el.style.setProperty('width',  px(cw), 'important');
        el.style.setProperty('height', px(ch), 'important');
        el.style.aspectRatio='';
        xCur += cw + gap;
      }
    }
  }

  // Helpers: video layout with equal minor side across all tiles
  function layoutVideoEqualMinor(rect, items){
    const n = items.length; if (!n) return;
    const { x, y, w:RW, h:RH } = rect;
    const ars = items.map(getVideoAR).map(a=> (a && isFinite(a) && a>0) ? a : 1);
    const isP  = ars.map(a=> a < 1);

    function distributeCounts(n, rows){
      const base=Math.floor(n/rows), rem=n%rows; return Array.from({length:rows},(_,i)=> base+(i<rem?1:0));
    }

    let best=null;
    const maxRows = Math.min(3, Math.max(1, n));
    for (let rows=1; rows<=maxRows; rows++){
      const counts = distributeCounts(n, rows);
      // build row index groups
      let idx=0; const groups=[];
      for (let r=0; r<rows; r++){ const c=counts[r]; const ids=[]; for(let k=0;k<c && idx<n;k++,idx++) ids.push(idx); groups.push(ids); }
      // width constraints per row and height coefficients
      const wLimits = [];
      let sumHCoef = 0;
      for (let r=0; r<rows; r++){
        const ids = groups[r]; const gapsRow = gap * Math.max(0, ids.length - 1);
        if (!ids.length){ wLimits.push(Infinity); continue; }
        const widthCoef = ids.reduce((s,i)=> s + (isP[i] ? 1 : ars[i]), 0);
        const hCoefRow  = ids.reduce((m,i)=> Math.max(m, isP[i] ? (1/ars[i]) : 1), 0);
        const limitW = (RW - gapsRow) / Math.max(0.0001, widthCoef);
        wLimits.push(limitW);
        sumHCoef += hCoefRow;
      }
      const limitH = (RH - gap * Math.max(0, rows - 1)) / Math.max(0.0001, sumHCoef);
      const S = Math.floor(Math.max(0, Math.min(limitH, ...wLimits)));
      if (!(S>0)) continue;
      if (!best || S > best.S) best = { S, rows, groups };
    }
    if (!best) return;

    const S = best.S;
    // vertical centering: compute total used height
    const rowHeights = best.groups.map(ids=>{
      if (!ids.length) return 0;
      const hRow = ids.reduce((m,i)=> Math.max(m, isP[i] ? Math.round(S/ars[i]) : S), 0);
      return hRow;
    });
    const usedH = rowHeights.reduce((s,h)=> s+h, 0) + gap * Math.max(0, best.groups.length-1);
    let yCur = y + Math.max(0, Math.floor((RH - usedH) / 2));

    for (let r=0; r<best.groups.length; r++){
      const ids = best.groups[r];
      if (!ids.length) continue;
      const gapsRow = gap * Math.max(0, ids.length - 1);
      // widths with equal minor S
      const widths = ids.map(i=> isP[i] ? S : Math.round(S * ars[i]));
      const sumW = widths.reduce((s,w)=> s+w, 0);
      const delta = (RW - gapsRow) - sumW;
      if (Math.abs(delta) <= 2 && widths.length) widths[widths.length-1] = Math.max(1, widths[widths.length-1] + delta);
      const rowH = rowHeights[r];
      let xCur = x + Math.max(0, Math.floor((RW - (sumW + gapsRow)) / 2));
      for (let k=0; k<ids.length; k++){
        const i = ids[k]; const el = items[i]; if (!el) continue;
        const wTile = widths[k];
        const hTile = isP[i] ? Math.round(S / ars[i]) : S;
        el.style.boxSizing='border-box';
        el.style.position='absolute';
        el.style.left = px(xCur);
        el.style.top  = px(yCur + Math.floor((rowH - hTile)/2));
        el.style.setProperty('width',  px(wTile), 'important');
        el.style.setProperty('height', px(hTile), 'important');
        el.style.aspectRatio='';
        xCur += wTile + gap;
      }
      yCur += rowH + gap;
    }
  }

  // Case handling
  const anyVideo = videoTiles.length > 0;
  const anyNoVid = noVideoTiles.length > 0;

  m.style.position = 'relative';
  m.classList.add('grid-active');

  if (!anyVideo && anyNoVid){
    // –ë–µ–∑ –≤–∏–¥–µ–æ ‚Äî –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Ç–∞–π–ª—ã –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
    layoutEqualGrid({ x:0, y:0, w:W, h:H }, noVideoTilesSorted, { forceSquare:true });
    m.style.height = px(H);
  } else if (anyVideo && !anyNoVid){
    // –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è ¬´–º–µ–Ω—å—à–∞—è –≥—Ä–∞–Ω—å¬ª —É –≤—Å–µ—Ö –≤–∏–¥–µ–æ
    layoutVideoEqualMinor({ x:0, y:0, w:W, h:H }, videoTilesSorted);
    m.style.height = px(H);
  } else {
    const isPortrait = matchMedia('(orientation: portrait)').matches;
    if (isPortrait){
      const hVid = Math.max(0, Math.round(H * 0.8));
      const hNo  = Math.max(0, H - hVid - gap);
      layoutVideoEqualMinor({ x:0, y:0, w:W, h:hVid }, videoTilesSorted);
      layoutEqualGrid({ x:0, y:hVid + gap, w:W, h:hNo }, noVideoTilesSorted, { forceSquare:true, asMini:true });
      m.style.height = px(H);
    } else {
      const wVid = Math.max(0, Math.round(W * 0.8));
      const wNo  = Math.max(0, W - wVid - gap);
      layoutVideoEqualMinor({ x:0, y:0, w:wVid, h:H }, videoTilesSorted);
      layoutEqualGrid({ x:wVid + gap, y:0, w:wNo, h:H }, noVideoTilesSorted, { forceSquare:true, asMini:true });
      m.style.height = px(H);
    }
  }

  tiles.forEach(t=> t.classList.remove('spotlight','thumb'));
}

function clearGrid(){
  const m = tilesMain(); if (!m) return;
  m.classList.remove('grid-active');
  m.style.position = '';
  m.style.height   = '';
  m.style.width    = '';
  m.querySelectorAll('.tile').forEach(t=>{
    t.style.removeProperty('position');
    t.style.removeProperty('top');
    t.style.removeProperty('left');
    t.style.removeProperty('width');
    t.style.removeProperty('height');
    t.style.removeProperty('box-sizing');
    t.style.aspectRatio = '';
  });
}

/* --- —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è --- */
window.addEventListener('resize', ()=>{ requestLayout(); }, { passive:true });
window.addEventListener('orientationchange', ()=>{ setTimeout(()=>{ requestLayout(); }, 60); }, { passive:true });

/* ResizeObserver ‚Äî —Å–ª–µ–¥–∏–º –∏ –∑–∞ .tiles-main, –∏ –∑–∞ #tiles */
let roMain = null;
let roHost = null;
function attachROs(){
  const m = tilesMain();
  const h = tilesHost();

  if (roMain){ roMain.disconnect(); roMain = null; }
  if (roHost){ roHost.disconnect(); roHost = null; }

  if (m){
    roMain = new ResizeObserver(()=>{ requestLayout(); });
    roMain.observe(m);
  }
  if (h){
    roHost = new ResizeObserver(()=>{ requestLayout(); });
    roHost.observe(h);
  }
}
attachROs();
document.addEventListener('DOMContentLoaded', attachROs);

/* –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö DOM/–∞—Ç—Ä–∏–±—É—Ç–æ–≤ (–≥–æ—Ä—è—á–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, —Å–º–µ–Ω–∞ AR) */
const tilesMutObs = new MutationObserver((muts)=>{
  for (const m of muts){
    if (m.type === 'childList' && (m.addedNodes.length || m.removedNodes.length)){ requestLayout(); return; }
    if (m.type === 'attributes'){ requestLayout(); return; } // data-ar / class / data-vid
  }
});
let tilesMutObsAttached = false;
function attachTilesMutObs(){
  if (tilesMutObsAttached) return;
const tm = tilesMain();
  if (!tm) return;
  tilesMutObs.observe(tm, {
  childList:true,
  subtree:true,
  attributes:true,
  attributeFilter:['data-ar','class','data-vid']
});
  tilesMutObsAttached = true;
}
attachTilesMutObs();
document.addEventListener('DOMContentLoaded', attachTilesMutObs);

/* ==== –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤–∏–¥–µ–æ (resize/metadata + RAF) ==== */
function attachVideoARWatcher(video){
  if (!video || video.__mobArWatchAttached) return;
  const handler = ()=>{
    const tile = video.closest?.('.tile');
    if (!tile) return;
    setTileAspectFromVideo(tile, video);
    if (isMobileGrid() || isMobileView()) layoutUniformGrid(); else safeFitSpotlightSize();
  };
  video.addEventListener('loadedmetadata', handler);
  video.addEventListener('loadeddata', handler);
  video.addEventListener('resize', handler);
  // RAF-–ø—É–ª–ª–µ—Ä –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–æ–±—ã—Ç–∏—è resize —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  let lastW = 0, lastH = 0;
  const poll = ()=>{
    if (!video.isConnected){ video.__mobArWatchAttached = false; return; }
    const w = video.videoWidth|0, h = video.videoHeight|0;
    if (w && h && (w!==lastW || h!==lastH)){
      lastW = w; lastH = h; handler();
    }
    video.__mobArWatchRAF = requestAnimationFrame(poll);
  };
  video.__mobArWatchAttached = true;
  poll();
}
function installVideoARWatchers(){
  const root = tilesMain() || document;
  root.querySelectorAll('video').forEach(attachVideoARWatcher);
  if (installVideoARWatchers._mo) installVideoARWatchers._mo.disconnect();
  const mo = new MutationObserver((muts)=>{
    for (const m of muts){
      m.addedNodes && m.addedNodes.forEach(node=>{
        if (node.nodeType!==1) return;
        if (node.matches?.('video')) attachVideoARWatcher(node);
        node.querySelectorAll?.('video').forEach(attachVideoARWatcher);
      });
    }
  });
  mo.observe(root, { childList:true, subtree:true });
  installVideoARWatchers._mo = mo;
}
installVideoARWatchers();
document.addEventListener('DOMContentLoaded', installVideoARWatchers);

// —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –∏–∑ media.js –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
window.addEventListener('app:local-video-replaced', ()=>{
  try{
    layoutUniformGrid();
    setTimeout(layoutUniformGrid, 60);
    setTimeout(layoutUniformGrid, 160);
  }catch{}
});

// –î–ª–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è AR –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã (iOS –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä—ã –¥–æ–ª—å—à–µ 300–º—Å)
function stabilizeAfterLocalVideoChange(totalMs = 2600, stepMs = 200){
  let elapsed = 0;
  const tick = ()=>{
    try{
      document.querySelectorAll('.tile video').forEach(v=>{
        const tile = v.closest('.tile');
        if (tile) setTileAspectFromVideo(tile, v);
      });
      layoutUniformGrid();
    }catch{}
    elapsed += stepMs;
    if (elapsed < totalMs) setTimeout(tick, stepMs);
  };
  setTimeout(tick, stepMs);
}
window.addEventListener('app:local-video-replaced', ()=> stabilizeAfterLocalVideoChange(3000, 220));

/* –≠–∫—Å–ø–æ—Ä—Ç ‚Äî –Ω–∞ —Å–ª—É—á–∞–π —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –∏–∑–≤–Ω–µ */
export function relayoutTilesIfMobile(){
  if (isMobileGrid()) layoutUniformGrid(); else clearGrid();
}

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á—ë—Ç –º–æ–∑–∞–∏–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Å–∫—Ç–æ–ø-–ø—Ä–æ—Ñ–∏–ª–µ–º)
export function relayoutTilesForce(){
  layoutUniformGrid();
}

/* ===== –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ç–∞–π–ª–æ–≤ –ø–æ data-pid (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Ç–∞–π–ª —Å –≤–∏–¥–µ–æ) ===== */
export function dedupeTilesByPid(){
  const tiles = Array.from(document.querySelectorAll('.tile'));
  const byPid = new Map();
  const toRemove = [];
  const hasVid = (t)=> !!t.querySelector('video');
  for (const t of tiles){
    const pid = t.getAttribute('data-pid');
    if (!pid) continue;
    const cur = byPid.get(pid);
    if (!cur){ byPid.set(pid, t); continue; }
    // –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∏–º–µ–µ—Ç –≤–∏–¥–µ–æ, –∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –Ω–µ—Ç ‚Äî –º–µ–Ω—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if (hasVid(t) && !hasVid(cur)){
      toRemove.push(cur);
      byPid.set(pid, t);
    } else {
      toRemove.push(t);
    }
  }
  toRemove.forEach(t=>{
    const v=t.querySelector('video'); if (v) safeRemoveVideo(v);
    try { t.remove(); } catch {}
  });
}

/* ===== –£—Ç–∏–ª–∏—Ç–∞: —É–¥–∞–ª–∏—Ç—å —Ç–∞–π–ª –ø–æ pid ===== */
export function removeTileByPid(pid){
  try{
    document.querySelectorAll(`.tile[data-pid="${CSS.escape(pid)}"]`).forEach(t=>{
      const v=t.querySelector('video'); if (v) safeRemoveVideo(v);
      t.remove();
    });
  }catch{}
}

/* ===== –û—á–∏—Å—Ç–∫–∞ ¬´—Å–∏—Ä–æ—Ç—Å–∫–∏—Ö¬ª DOM-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ —Å—Ç–µ–π–ª–∞ ===== */
export function cleanupOrphanDom(){
  try{
    const allowed = new Set();
    ctx.registry.forEach((_r, id)=> allowed.add(id));

    // .tile: base pid –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–µ–µ—Å—Ç—Ä–µ; screen (#screen) –±–µ–∑ –≤–∏–¥–µ–æ —É–¥–∞–ª—è–µ–º
    document.querySelectorAll('.tile').forEach(t=>{
      const pid = t.getAttribute('data-pid'); if (!pid) return;
      const base = pid.replace(/#screen$/,'');
      const has = allowed.has(base);
      const isScreen = /#screen$/.test(pid);
      const hasVid = !!t.querySelector('video');
      if (!has || (isScreen && !hasVid)){
        const v=t.querySelector('video'); if (v) safeRemoveVideo(v);
        try{ t.remove(); }catch{}
      }
    });

    // –°–ø–∏—Å–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç—Ä–æ–∫–∏, —á–µ–π pid –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–µ—Å—Ç—Ä–µ.
    // –î—É–±–ª–∏–∫–∞—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö (–∫–∞—Ä—É—Å–µ–ª—å–Ω—ã–µ –ø–∞–Ω–µ–ª–∏) –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ.
    document.querySelectorAll('#onlineList [data-pid], .user-list [data-pid]').forEach(row=>{
      const pid = row.getAttribute('data-pid');
      if (!allowed.has(pid)) { try{ row.remove(); }catch{}; }
    });
  }catch{}
}
